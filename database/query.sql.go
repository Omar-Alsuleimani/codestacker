// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package database

import (
	"context"
)

const createRecord = `-- name: CreateRecord :one
INSERT INTO records (
  name,
  numOfPages,
  size
) VALUES (
  $1,
  $2,
  $3
)
RETURNING id, name, upload_time, numofpages, size
`

type CreateRecordParams struct {
	Name       string `json:"name"`
	Numofpages int32  `json:"numofpages"`
	Size       int32  `json:"size"`
}

func (q *Queries) CreateRecord(ctx context.Context, arg CreateRecordParams) (Record, error) {
	row := q.db.QueryRow(ctx, createRecord, arg.Name, arg.Numofpages, arg.Size)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UploadTime,
		&i.Numofpages,
		&i.Size,
	)
	return i, err
}

const createSentence = `-- name: CreateSentence :one
INSERT INTO sentences (
  sentence,
  pdfId
) VALUES (
  $1,
  $2
  )
  RETURNING id, sentence, pdfid
`

type CreateSentenceParams struct {
	Sentence string `json:"sentence"`
	Pdfid    int32  `json:"pdfid"`
}

func (q *Queries) CreateSentence(ctx context.Context, arg CreateSentenceParams) (Sentence, error) {
	row := q.db.QueryRow(ctx, createSentence, arg.Sentence, arg.Pdfid)
	var i Sentence
	err := row.Scan(&i.ID, &i.Sentence, &i.Pdfid)
	return i, err
}

const deleteRecord = `-- name: DeleteRecord :exec
DELETE FROM records
WHERE id = $1
`

func (q *Queries) DeleteRecord(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRecord, id)
	return err
}

const getRecord = `-- name: GetRecord :one
SELECT id, name, upload_time, numofpages, size FROM records
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRecord(ctx context.Context, id int32) (Record, error) {
	row := q.db.QueryRow(ctx, getRecord, id)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UploadTime,
		&i.Numofpages,
		&i.Size,
	)
	return i, err
}

const listRecordSentences = `-- name: ListRecordSentences :many
SELECT id, sentence, pdfid FROM sentences where pdfId = $1
`

func (q *Queries) ListRecordSentences(ctx context.Context, pdfid int32) ([]Sentence, error) {
	rows, err := q.db.Query(ctx, listRecordSentences, pdfid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sentence
	for rows.Next() {
		var i Sentence
		if err := rows.Scan(&i.ID, &i.Sentence, &i.Pdfid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecords = `-- name: ListRecords :many
SELECT id, name, upload_time, numofpages, size FROM records
ORDER BY name
`

func (q *Queries) ListRecords(ctx context.Context) ([]Record, error) {
	rows, err := q.db.Query(ctx, listRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Record
	for rows.Next() {
		var i Record
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UploadTime,
			&i.Numofpages,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSentences = `-- name: ListSentences :many
SELECT id, sentence, pdfid FROM sentences
`

func (q *Queries) ListSentences(ctx context.Context) ([]Sentence, error) {
	rows, err := q.db.Query(ctx, listSentences)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sentence
	for rows.Next() {
		var i Sentence
		if err := rows.Scan(&i.ID, &i.Sentence, &i.Pdfid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecord = `-- name: UpdateRecord :exec
UPDATE records
  set name = $2
WHERE id = $1
`

type UpdateRecordParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateRecord(ctx context.Context, arg UpdateRecordParams) error {
	_, err := q.db.Exec(ctx, updateRecord, arg.ID, arg.Name)
	return err
}
